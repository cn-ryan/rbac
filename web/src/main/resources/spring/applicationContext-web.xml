<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">
    <context:component-scan base-package="cn.ryan.rbac">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath*:mybatis/mapper/*-mapper.xml</value>
            </list>
        </property>
    </bean>
    <bean id="mapperScannerConfiguer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.ryan.rbac..dao"></property>
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="authenticator" ref="authenticator"></property>
        <property name="rememberMeManager" ref="rememberMeManager"></property>
        <property name="realms">
            <list>
                <ref bean="customerRealm"></ref>
            </list>
        </property>
    </bean>
    <bean id="customerRealm" class="cn.ryan.rbac.shiro.realm.CustomerRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>
                <property name="hashIterations" value="2"></property>
                <property name="storedCredentialsHexEncoded" value="true"></property>
            </bean>
        </property>
    </bean>
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"></property>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor">
    </bean>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"></bean>
    <!-- 配置cookies -->
    <bean id="rememberCookies" class="org.apache.shiro.web.servlet.SimpleCookie">
      <constructor-arg value="rememberMe"></constructor-arg>
      <property name="httpOnly" value="true"></property>
      <property name="maxAge" value="#{60*60*24}"></property>
    </bean>

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('6ZmI6I2j5Y+R5aSn5ZOlAA==')}"/>
        <property name="cookie" ref="rememberCookies"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"></property>
        <property name="loginUrl" value="/login"></property>
        <property name="successUrl" value="/main"></property>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
        <!--<property name="filters">-->
            <!--<map>-->
                <!--&lt;!&ndash; 将自定义 的FormAuthenticationFilter注入shiroFilter中 &ndash;&gt;-->
                <!--<entry key="authc" value-ref="formAuthenticationFilter"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--
            配置哪些页面需要受保护，以及哪些页面需要的权限
            1.anon 表示可以匿名访问
            2.authc 表示必须认证（登录）
        -->
        <property name="filterChainDefinitions">
            <value>
                /css/**= anon
                /img/** =anon
                /bootstrap/** =anon
                /jquery/** =anon
                /script/** =anon
                /fonts/** =anon
                /layer/** =anon
                /login = anon
                /doLogin = anon
                /logout = logout
                /** = authc
            </value>
        </property>
    </bean>
</beans>